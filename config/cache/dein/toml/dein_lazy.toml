[[plugins]] # color scheme
repo = 'tyrannicaltoucan/vim-quantum'
on_event = ['BufRead', 'BufNewFile', 'BufWinEnter']
hook_source = 'colorscheme quantum'

[[plugins]] # visually displaying indent levels
repo = 'Yggdroot/indentLine'
on_event = ['BufRead', 'BufNewFile', 'BufWinEnter']
hook_add = 'let g:indentLine_char = "Â¦"'
hook_source = '''
  autocmd Filetype json let g:indentLine_conceallevel = 0
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-l> ddc#complete_common_string()
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ "\<TAB>" : ddc#manual_complete()
  call ddc#custom#patch_global(
      \ 'sources',
      \ ['around'],
      \ )
  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \ },
      \ 'nvimlsp': {'mark': 'lsp', 'forceCompletionPattern': '\\.|:|->'},
      \ })
  call ddc#custom#patch_filetype(
      \ ['help', 'markdown', 'gitcommit', 'toml'], 'sources',
      \ ['around']
      \ )
  call ddc#custom#patch_filetype(
      \ ['typescript', 'go'], 'sources',
      \ ['nvimlsp', 'around']
      \ )
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['typescript', 'go']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
  lua << EOF
require'lspconfig'.denols.setup{}
require'lspconfig'.gopls.setup{}
EOF
'''

[[plugins]] # unite all interfaces
repo = 'Shougo/denite.nvim'
on_event = ['BufRead', 'BufNewFile', 'BufWinEnter']
if = 'has("nvim")'
hook_add = '''
  nmap <LocalLeader>d [denite]
  nnoremap <silent> [denite]f :Denite file/rec<CR>
  nnoremap <silent> [denite]b :Denite buffer<CR>
  nnoremap <silent> [denite]l :Denite line<CR>
  nnoremap <silent> [denite]r :Denite register<CR>
  nnoremap <silent> [denite]: :Denite command<CR>
  nnoremap <silent> [denite]h :Denite command_history<CR>
  nnoremap <silent> [denite]c :Denite change<CR>
  nnoremap <silent> [denite]g :Denite grep<CR>
  nnoremap <silent> [denite]G :DeniteCursorWord  grep<CR>
  nnoremap <silent> [denite]. :Denite -resume<CR>
  nnoremap <silent> [denite]; :Denite -resume -immediately -select=+1<CR>
  nnoremap <silent> [denite], :Denite -resume -immediately -select=-1<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction
'''
hook_source = '''
  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.8
  call denite#custom#option('default', {
        \ 'prompt': '>>>',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
        \ 'split': 'floating',
        \ })

  if executable('rg')
    call denite#custom#var(
      \ 'file/rec', 'command', ['rg', '--files'])
    call denite#custom#var(
      \ 'grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
  endif
  call denite#custom#var(
    \ 'grep', 'default_opts', ['-nH'])

  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])
'''
